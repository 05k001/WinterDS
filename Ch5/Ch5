Andrew Jordan Set 5

Set 5: 5.1, 5.2, 5.10, 5.13, 5.20., 5.27


5.1 Given the Input [4371,1323.6173,4199,4344,9679,19889] and a hash function h(x) = x(mod()10) show
the resulting:

	1. Seperate Chaining

	0 -> o
	1 -> 4371
	2 ->
	3 -> 1323 -> 6173
	4 -> 4344
	5 ->
	6 ->
	7 ->
	8 ->
	9 -> 4199 -> 9679 -> 1989

	2.Hash table linear probing

	0 -> 9679
	1 -> 4371
	2 -> 1989
	3 -> 1323
	4 -> 6173
	5 -> 4344
	6 ->
	7 ->
	8 ->
	9 -> 4199

	3. Quadratic Probing

	0 -> 9679
	1 -> 4371
	2 ->
	3 -> 1323
	4 -> 6173
	5 -> 4344
	6 ->
	7 ->
	8 -> 1989
	9 -> 4199

	4. Second Hash Function

	0 ->
	1 -> 4371
	2 -> 
	3 -> 1323
	4 -> 6173
	5 -> 9679
	6 ->
	7 -> 4344
	8 ->
	9 -> 4199


5.2 Rehashing the tables from 5.1, Lets, rehash to a table size that is roughly twice as big as is
prime. In this case that will be 19 and h(z) = z(mod19)

		1.
		
		0 -> 4199
		1 -> 4371
		8 -> 9679
		

		2. New Locations are:

		8 -> 9679
		1 -> 4371
		13 -> 1989
		12 -> 1323
		17 -> 6173
		14 -> 4344

		3. Sinse 12 and 13 are occoupied

		- (4199)

		4. 12 is Occoupied so 0 -> 4199


5.8 Cubic probing wil encounter fewer collisions than quadratic probing. The output of simulateHash.cpp is:

		linear = 1995
		quadratic = 1967
		cubic = 1946

5.11 In the case of a collision this method will use a pseudorandom number to make jumps awak from the home bucket. However the length of the jump the same for each home bucket. This would avoid the secondary clustering near the home bucket. It is a special case of double hashing in that the jumps away from the home bucket are fixed as contrasted by double hashing where the jumps grow at each jump.

5.17

class Pair {
	
	public:
		Pair(HashedObj k, Object d): key(k), def(d){ }

	private:
		HashedObj key;
		Object def;
	};

template <typename HashedObj, typename Object>
class Dictionary
	{
		public:
			Dictionary ( )
				{ }
			void insert ( const HashedObj & key, const Object & definition)
				{items.insert(Pair<HashedObj, Object>(key, definition)
			const Object & lookup ( const HashedObj & key ) const
				{ return items.contains(key);}
			bool isEmpty( ) const
				{return items.isEmpty();}
			void makeEmpty( )
				{ items.makeEmpty();}
		private:
			HashTable<Pair<HashedObj, Object> > items;
	};


5.19 Suppose you are storing 8 bit integers, with M = 4. You could start with D = 2, but sinde there are 5 strings that start with 10, we know we'll have to split a block, so lets try D = 3.
